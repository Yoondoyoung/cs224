00000000: 2369 6e63 6c75 6465 203c 7374 6469 6f2e  #include <stdio.
00000010: 683e 0a23 696e 636c 7564 6520 3c73 7464  h>.#include <std
00000020: 6c69 622e 683e 0a23 696e 636c 7564 6520  lib.h>.#include 
00000030: 3c73 7472 696e 672e 683e 0a0a 2f2f 2023  <string.h>..// #
00000040: 6465 6669 6e65 2054 5255 4520 310a 2f2f  define TRUE 1.//
00000050: 2023 6465 6669 6e65 2046 414c 5345 2030   #define FALSE 0
00000060: 0a2f 2f20 2364 6566 696e 6520 4241 445f  .// #define BAD_
00000070: 4e55 4d42 4552 5f41 5247 5320 310a 0a69  NUMBER_ARGS 1..i
00000080: 6e74 2068 6578 203d 2031 363b 0a69 6e74  nt hex = 16;.int
00000090: 2062 696e 6172 7920 3d20 363b 0a0a 766f   binary = 6;..vo
000000a0: 6964 2070 7269 6e74 4461 7461 4173 4269  id printDataAsBi
000000b0: 6e61 7279 2875 6e73 6967 6e65 6420 6368  nary(unsigned ch
000000c0: 6172 202a 6461 7461 2c20 7369 7a65 5f74  ar *data, size_t
000000d0: 2073 697a 6529 207b 0a20 2066 6f72 2028   size) {.  for (
000000e0: 696e 7420 6920 3d20 303b 2069 203c 2062  int i = 0; i < b
000000f0: 696e 6172 793b 2069 2b2b 2920 7b0a 2020  inary; i++) {.  
00000100: 2020 7072 696e 7466 2822 2022 293b 0a0a    printf(" ");..
00000110: 2020 2020 6966 2028 6920 3c20 2869 6e74      if (i < (int
00000120: 2973 697a 6529 207b 0a20 2020 2020 2063  )size) {.      c
00000130: 6861 7220 6279 7465 5374 7269 6e67 5b38  har byteString[8
00000140: 5d3b 0a20 2020 2020 2075 6e73 6967 6e65  ];.      unsigne
00000150: 6420 6368 6172 2063 7572 7265 6e74 4368  d char currentCh
00000160: 6172 203d 202a 2864 6174 6120 2b20 6929  ar = *(data + i)
00000170: 3b0a 0a20 2020 2020 2066 6f72 2028 696e  ;..      for (in
00000180: 7420 6920 3d20 373b 2069 203e 3d20 303b  t i = 7; i >= 0;
00000190: 2069 2d2d 2920 7b0a 2020 2020 2020 2020   i--) {.        
000001a0: 6279 7465 5374 7269 6e67 5b69 5d20 3d20  byteString[i] = 
000001b0: 6375 7272 656e 7443 6861 7220 2520 3220  currentChar % 2 
000001c0: 3d3d 2031 203f 2027 3127 203a 2027 3027  == 1 ? '1' : '0'
000001d0: 3b0a 2020 2020 2020 2020 6375 7272 656e  ;.        curren
000001e0: 7443 6861 7220 2f3d 2032 3b0a 2020 2020  tChar /= 2;.    
000001f0: 2020 7d0a 0a20 2020 2020 2070 7269 6e74    }..      print
00000200: 6628 2225 7322 2c20 6279 7465 5374 7269  f("%s", byteStri
00000210: 6e67 293b 0a20 2020 207d 2065 6c73 6520  ng);.    } else 
00000220: 7b0a 2020 2020 2020 2f2f 2038 2073 7061  {.      // 8 spa
00000230: 6365 7320 7768 6572 6520 6120 6279 7465  ces where a byte
00000240: 2077 6f75 6c64 2067 6f0a 2020 2020 2020   would go.      
00000250: 7072 696e 7466 2822 252a 6322 2c20 382c  printf("%*c", 8,
00000260: 2027 2027 293b 0a20 2020 207d 0a20 207d   ' ');.    }.  }
00000270: 0a7d 0a0a 0a0a 2f2a 2a0a 202a 2050 6172  .}..../**. * Par
00000280: 7365 7320 7468 6520 636f 6d6d 616e 6420  ses the command 
00000290: 6c69 6e65 2e0a 202a 0a20 2a20 6172 6763  line.. *. * argc
000002a0: 3a20 7468 6520 6e75 6d62 6572 206f 6620  : the number of 
000002b0: 6974 656d 7320 6f6e 2074 6865 2063 6f6d  items on the com
000002c0: 6d61 6e64 206c 696e 6520 2861 6e64 206c  mand line (and l
000002d0: 656e 6774 6820 6f66 2074 6865 0a20 2a20  ength of the. * 
000002e0: 2020 2020 2020 6172 6776 2061 7272 6179        argv array
000002f0: 2920 696e 636c 7564 696e 6720 7468 6520  ) including the 
00000300: 6578 6563 7574 6162 6c65 0a20 2a20 6172  executable. * ar
00000310: 6776 3a20 7468 6520 6172 7261 7920 6f66  gv: the array of
00000320: 2061 7267 756d 656e 7473 2061 7320 7374   arguments as st
00000330: 7269 6e67 7320 2863 6861 722a 2061 7272  rings (char* arr
00000340: 6179 290a 202a 2062 6974 733a 2074 6865  ay). * bits: the
00000350: 2069 6e74 6567 6572 2076 616c 7565 2069   integer value i
00000360: 7320 7365 7420 746f 2054 5255 4520 6966  s set to TRUE if
00000370: 2062 6974 7320 6f75 7470 7574 2069 6e64   bits output ind
00000380: 6963 6174 6564 0a20 2a20 2020 2020 2020  icated. *       
00000390: 6f75 7468 6572 7769 7365 2046 414c 5345  outherwise FALSE
000003a0: 2066 6f72 2068 6578 206f 7574 7075 740a   for hex output.
000003b0: 202a 0a20 2a20 7265 7475 726e 7320 7468   *. * returns th
000003c0: 6520 696e 7075 7420 6669 6c65 2070 6f69  e input file poi
000003d0: 6e74 6572 2028 4649 4c45 2a29 0a20 2a2a  nter (FILE*). **
000003e0: 2f0a 4649 4c45 202a 7061 7273 6543 6f6d  /.FILE *parseCom
000003f0: 6d61 6e64 4c69 6e65 2869 6e74 2061 7267  mandLine(int arg
00000400: 632c 2063 6861 7220 2a2a 6172 6776 2c20  c, char **argv, 
00000410: 696e 7420 2a62 6974 7329 207b 0a20 2069  int *bits) {.  i
00000420: 6620 2861 7267 6320 3e20 3229 207b 0a20  f (argc > 2) {. 
00000430: 2020 2070 7269 6e74 6628 2255 7361 6765     printf("Usage
00000440: 3a20 2573 205b 2d62 7c2d 6269 7473 5d5c  : %s [-b|-bits]\
00000450: 6e22 2c20 6172 6776 5b30 5d29 3b0a 2020  n", argv[0]);.  
00000460: 2020 6578 6974 2831 293b 0a20 207d 0a0a    exit(1);.  }..
00000470: 2020 6966 2028 6172 6763 203d 3d20 3220    if (argc == 2 
00000480: 2626 0a20 2020 2020 2028 7374 7263 6d70  &&.      (strcmp
00000490: 2861 7267 765b 315d 2c20 222d 6222 2920  (argv[1], "-b") 
000004a0: 3d3d 2030 207c 7c20 7374 7263 6d70 2861  == 0 || strcmp(a
000004b0: 7267 765b 315d 2c20 222d 6269 7473 2229  rgv[1], "-bits")
000004c0: 203d 3d20 3029 2920 7b0a 2020 2020 2a62   == 0)) {.    *b
000004d0: 6974 7320 3d20 313b 0a20 207d 2065 6c73  its = 1;.  } els
000004e0: 6520 7b0a 2020 2020 2a62 6974 7320 3d20  e {.    *bits = 
000004f0: 303b 0a20 207d 0a0a 2020 7265 7475 726e  0;.  }..  return
00000500: 2073 7464 696e 3b0a 7d0a 0a2f 2a2a 0a20   stdin;.}../**. 
00000510: 2a20 5772 6974 6573 2064 6174 6120 746f  * Writes data to
00000520: 2073 7464 6f75 7420 696e 2068 6578 6164   stdout in hexad
00000530: 6563 696d 616c 2e0a 202a 0a20 2a20 5365  ecimal.. *. * Se
00000540: 6520 6d79 7878 642e 6d64 2066 6f72 2064  e myxxd.md for d
00000550: 6574 6169 6c73 2e0a 202a 0a20 2a20 6461  etails.. *. * da
00000560: 7461 3a20 616e 2061 7272 6179 206f 6620  ta: an array of 
00000570: 6e6f 206d 6f72 6520 7468 616e 2031 3620  no more than 16 
00000580: 6368 6172 6163 7465 7273 0a20 2a20 7369  characters. * si
00000590: 7a65 3a20 7468 6520 7369 7a65 206f 6620  ze: the size of 
000005a0: 7468 6520 6172 7261 790a 202a 2a2f 0a76  the array. **/.v
000005b0: 6f69 6420 7072 696e 7444 6174 6141 7348  oid printDataAsH
000005c0: 6578 2875 6e73 6967 6e65 6420 6368 6172  ex(unsigned char
000005d0: 202a 6461 7461 2c20 7369 7a65 5f74 2073   *data, size_t s
000005e0: 697a 6529 207b 0a20 2066 6f72 2028 696e  ize) {.  for (in
000005f0: 7420 6920 3d20 303b 2069 203c 2068 6578  t i = 0; i < hex
00000600: 3b20 692b 2b29 207b 0a20 2020 2069 6620  ; i++) {.    if 
00000610: 2869 203c 2068 6578 202d 2031 2026 2620  (i < hex - 1 && 
00000620: 2128 6920 2520 3229 2920 7b0a 2020 2020  !(i % 2)) {.    
00000630: 2020 2020 7072 696e 7466 2822 2022 293b      printf(" ");
00000640: 0a20 2020 207d 0a0a 2020 2020 6966 2028  .    }..    if (
00000650: 6920 3c20 2869 6e74 2973 697a 6529 207b  i < (int)size) {
00000660: 0a20 2020 2020 2070 7269 6e74 6628 2225  .      printf("%
00000670: 3032 7822 2c20 2a28 6461 7461 202b 2069  02x", *(data + i
00000680: 2929 3b0a 2020 2020 7d20 656c 7365 207b  ));.    } else {
00000690: 0a20 2020 2020 2070 7269 6e74 6628 2225  .      printf("%
000006a0: 2a63 222c 2032 2c20 2720 2729 3b0a 2020  *c", 2, ' ');.  
000006b0: 2020 7d0a 2020 7d0a 7d0a 0a2f 2a2a 0a20    }.  }.}../**. 
000006c0: 2a20 5772 6974 6573 2064 6174 6120 746f  * Writes data to
000006d0: 2073 7464 6f75 7420 6173 2063 6861 7261   stdout as chara
000006e0: 6374 6572 732e 0a20 2a0a 202a 2053 6565  cters.. *. * See
000006f0: 206d 7978 7864 2e6d 6420 666f 7220 6465   myxxd.md for de
00000700: 7461 696c 732e 0a20 2a0a 202a 2064 6174  tails.. *. * dat
00000710: 613a 2061 6e20 6172 7261 7920 6f66 206e  a: an array of n
00000720: 6f20 6d6f 7265 2074 6861 6e20 3136 2063  o more than 16 c
00000730: 6861 7261 6374 6572 730a 202a 2073 697a  haracters. * siz
00000740: 653a 2074 6865 2073 697a 6520 6f66 2074  e: the size of t
00000750: 6865 2061 7272 6179 0a20 2a2a 2f0a 766f  he array. **/.vo
00000760: 6964 2070 7269 6e74 4461 7461 4173 4368  id printDataAsCh
00000770: 6172 7328 756e 7369 676e 6564 2063 6861  ars(unsigned cha
00000780: 7220 2a64 6174 612c 2073 697a 655f 7420  r *data, size_t 
00000790: 7369 7a65 2920 7b0a 2020 666f 7220 2869  size) {.  for (i
000007a0: 6e74 2069 203d 2030 3b20 6920 3c20 2869  nt i = 0; i < (i
000007b0: 6e74 2920 7369 7a65 3b20 692b 2b29 207b  nt) size; i++) {
000007c0: 0a20 2020 2075 6e73 6967 6e65 6420 6368  .    unsigned ch
000007d0: 6172 2063 7572 7265 6e74 4368 6172 203d  ar currentChar =
000007e0: 202a 2864 6174 6120 2b20 6929 3b0a 0a20   *(data + i);.. 
000007f0: 2020 2069 6620 2863 7572 7265 6e74 4368     if (currentCh
00000800: 6172 203e 2031 3236 207c 7c20 6375 7272  ar > 126 || curr
00000810: 656e 7443 6861 7220 3c20 3332 2920 7b0a  entChar < 32) {.
00000820: 2020 2020 2020 2020 6375 7272 656e 7443          currentC
00000830: 6861 7220 3d20 272e 273b 0a20 2020 207d  har = '.';.    }
00000840: 0a0a 2020 2020 7072 696e 7466 2822 2563  ..    printf("%c
00000850: 222c 2063 7572 7265 6e74 4368 6172 293b  ", currentChar);
00000860: 0a20 207d 0a7d 0a0a 766f 6964 2072 6561  .  }.}..void rea
00000870: 6441 6e64 5072 696e 7449 6e70 7574 4173  dAndPrintInputAs
00000880: 4865 7828 4649 4c45 202a 696e 7075 7429  Hex(FILE *input)
00000890: 207b 0a20 2075 6e73 6967 6e65 6420 6368   {.  unsigned ch
000008a0: 6172 2064 6174 615b 6865 785d 3b0a 2020  ar data[hex];.  
000008b0: 696e 7420 6e75 6d42 7974 6573 5265 6164  int numBytesRead
000008c0: 203d 2066 7265 6164 2864 6174 612c 2031   = fread(data, 1
000008d0: 2c20 6865 782c 2069 6e70 7574 293b 0a20  , hex, input);. 
000008e0: 2075 6e73 6967 6e65 6420 696e 7420 6f66   unsigned int of
000008f0: 6673 6574 203d 2030 3b0a 2020 7768 696c  fset = 0;.  whil
00000900: 6520 286e 756d 4279 7465 7352 6561 6420  e (numBytesRead 
00000910: 213d 2030 2920 7b0a 2020 2020 7072 696e  != 0) {.    prin
00000920: 7466 2822 2530 3878 3a22 2c20 6f66 6673  tf("%08x:", offs
00000930: 6574 293b 0a20 2020 206f 6666 7365 7420  et);.    offset 
00000940: 2b3d 206e 756d 4279 7465 7352 6561 643b  += numBytesRead;
00000950: 0a20 2020 2070 7269 6e74 4461 7461 4173  .    printDataAs
00000960: 4865 7828 6461 7461 2c20 6e75 6d42 7974  Hex(data, numByt
00000970: 6573 5265 6164 293b 0a20 2020 2070 7269  esRead);.    pri
00000980: 6e74 6628 2220 2022 293b 0a20 2020 2070  ntf("  ");.    p
00000990: 7269 6e74 4461 7461 4173 4368 6172 7328  rintDataAsChars(
000009a0: 6461 7461 2c20 6e75 6d42 7974 6573 5265  data, numBytesRe
000009b0: 6164 293b 0a20 2020 2070 7269 6e74 6628  ad);.    printf(
000009c0: 225c 6e22 293b 0a20 2020 206e 756d 4279  "\n");.    numBy
000009d0: 7465 7352 6561 6420 3d20 6672 6561 6428  tesRead = fread(
000009e0: 6461 7461 2c20 312c 2068 6578 2c20 696e  data, 1, hex, in
000009f0: 7075 7429 3b0a 2020 7d0a 7d0a 0a2f 2a2a  put);.  }.}../**
00000a00: 0a20 2a20 4269 7473 206f 7574 7075 7420  . * Bits output 
00000a10: 666f 7220 7878 642e 0a20 2a0a 202a 2053  for xxd.. *. * S
00000a20: 6565 206d 7978 7864 2e6d 6420 666f 7220  ee myxxd.md for 
00000a30: 6465 7461 696c 732e 0a20 2a0a 202a 2069  details.. *. * i
00000a40: 6e70 7574 3a20 696e 7075 7420 7374 7265  nput: input stre
00000a50: 616d 0a20 2a2a 2f0a 766f 6964 2072 6561  am. **/.void rea
00000a60: 6441 6e64 5072 696e 7449 6e70 7574 4173  dAndPrintInputAs
00000a70: 4269 7473 2846 494c 4520 2a69 6e70 7574  Bits(FILE *input
00000a80: 2920 7b0a 2020 756e 7369 676e 6564 2063  ) {.  unsigned c
00000a90: 6861 7220 6461 7461 5b62 696e 6172 795d  har data[binary]
00000aa0: 3b0a 2020 696e 7420 6e75 6d42 7974 6573  ;.  int numBytes
00000ab0: 5265 6164 203d 2066 7265 6164 2864 6174  Read = fread(dat
00000ac0: 612c 2031 2c20 6269 6e61 7279 2c20 696e  a, 1, binary, in
00000ad0: 7075 7429 3b0a 2020 756e 7369 676e 6564  put);.  unsigned
00000ae0: 2069 6e74 206f 6666 7365 7420 3d20 303b   int offset = 0;
00000af0: 0a20 2077 6869 6c65 2028 6e75 6d42 7974  .  while (numByt
00000b00: 6573 5265 6164 2021 3d20 3029 207b 0a20  esRead != 0) {. 
00000b10: 2020 2070 7269 6e74 6628 2225 3038 783a     printf("%08x:
00000b20: 222c 206f 6666 7365 7429 3b0a 2020 2020  ", offset);.    
00000b30: 6f66 6673 6574 202b 3d20 6e75 6d42 7974  offset += numByt
00000b40: 6573 5265 6164 3b0a 2020 2020 7072 696e  esRead;.    prin
00000b50: 7444 6174 6141 7342 696e 6172 7928 6461  tDataAsBinary(da
00000b60: 7461 2c20 6e75 6d42 7974 6573 5265 6164  ta, numBytesRead
00000b70: 293b 0a20 2020 2070 7269 6e74 6628 2220  );.    printf(" 
00000b80: 2022 293b 0a20 2020 2070 7269 6e74 4461   ");.    printDa
00000b90: 7461 4173 4368 6172 7328 6461 7461 2c20  taAsChars(data, 
00000ba0: 6e75 6d42 7974 6573 5265 6164 293b 0a20  numBytesRead);. 
00000bb0: 2020 2070 7269 6e74 6628 225c 6e22 293b     printf("\n");
00000bc0: 0a20 2020 206e 756d 4279 7465 7352 6561  .    numBytesRea
00000bd0: 6420 3d20 6672 6561 6428 6461 7461 2c20  d = fread(data, 
00000be0: 312c 2062 696e 6172 792c 2069 6e70 7574  1, binary, input
00000bf0: 293b 0a20 207d 0a7d 0a0a 0a0a 0a69 6e74  );.  }.}.....int
00000c00: 206d 6169 6e28 696e 7420 6172 6763 2c20   main(int argc, 
00000c10: 6368 6172 202a 2a61 7267 7629 207b 0a20  char **argv) {. 
00000c20: 2069 6e74 2062 6974 7320 3d20 303b 0a20   int bits = 0;. 
00000c30: 2046 494c 4520 2a69 6e70 7574 203d 2070   FILE *input = p
00000c40: 6172 7365 436f 6d6d 616e 644c 696e 6528  arseCommandLine(
00000c50: 6172 6763 2c20 6172 6776 2c20 2662 6974  argc, argv, &bit
00000c60: 7329 3b0a 0a20 2069 6620 2862 6974 7320  s);..  if (bits 
00000c70: 3d3d 2030 2920 7b0a 2020 2020 7265 6164  == 0) {.    read
00000c80: 416e 6450 7269 6e74 496e 7075 7441 7348  AndPrintInputAsH
00000c90: 6578 2869 6e70 7574 293b 0a20 207d 2065  ex(input);.  } e
00000ca0: 6c73 6520 7b0a 2020 2020 7265 6164 416e  lse {.    readAn
00000cb0: 6450 7269 6e74 496e 7075 7441 7342 6974  dPrintInputAsBit
00000cc0: 7328 696e 7075 7429 3b0a 2020 7d0a 2020  s(input);.  }.  
00000cd0: 7265 7475 726e 2030 3b0a 7d0a            return 0;.}.
